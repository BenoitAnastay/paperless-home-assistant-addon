#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Benoit Anastay Add-on: Paperless-ngx
# Configures Parless-ngx
# ==============================================================================

declare -a urls=()
CSRF=""

PAPERLESS_CONSUMPTION_DIR=/share/paperless/consume
PAPERLESS_DATA_DIR=/config/data
PAPERLESS_MEDIA_ROOT=/share/paperless/media
PAPERLESS_ADMIN_PASSWORD=$(bashio::config 'default_superuser.password')

if bashio::fs.directory_exists '/share/paperless/data'; then
    bashio::log.info "Migrating 'data' folder from share storage to /addon_configs/papeless_ngx/data"
    mv /share/paperless/data /config
fi

if bashio::fs.directory_exists '/share/paperless'; then
    chown -R paperless:paperless /share/paperless
fi

if ! bashio::fs.directory_exists "${PAPERLESS_DATA_DIR}"; then
    if bashio::var.equals "${PAPERLESS_ADMIN_PASSWORD}" "changeme"; then
        bashio::log.error "Please change default admin password before running addon"
        bashio::exit.nok
    fi
fi

mkdir -p $PAPERLESS_CONSUMPTION_DIR
mkdir -p $PAPERLESS_DATA_DIR
mkdir -p $PAPERLESS_MEDIA_ROOT

chown -R paperless:paperless /usr/src/paperless

cp /usr/src/paperless/paperless.conf /config/paperless.conf.exemple

# Get HA Port
result=$(bashio::api.supervisor GET /core/info true || true)
port=$(bashio::jq "$result" ".data.port")
addon_port=$(bashio::addon.port 80)

# Get all possible URLs
result=$(bashio::api.supervisor GET /core/api/config true || true)
urls+=("ingress.local")
urls+=("$(bashio::info.hostname).local")
urls+=("$(bashio::info.hostname)")
urls+=("$(bashio::jq "$result" '.internal_url' | cut -d'/' -f3 | cut -d':' -f1)")
urls+=("$(bashio::jq "$result" '.external_url' | cut -d'/' -f3 | cut -d':' -f1)")

# Get supported interfaces
for interface in $(bashio::network.interfaces); do
    urls+=("$(bashio::network.ipv6_address "${interface}" | cut -d'/' -f1)")
    urls+=("$(bashio::network.ipv4_address "${interface}" | cut -d'/' -f1)")
done

if bashio::config.has_value 'csrf_allowed'; then
    bashio::log.info "Setup manually defined ALLOWED_CSRF domains"

    while read -r line; do
        urls+=("$line")
    done <<< "$(bashio::config 'csrf_allowed')"
fi

# Add internal and external URL as it
if [[ "$(bashio::jq "$result" '.external_url')" != "null" ]]; then
    CSRF=$(bashio::jq "$result" '.external_url')
fi
if [[ "$(bashio::jq "$result" '.internal_url')" != "null" ]]; then
    CSRF=$(bashio::jq "$result" '.internal_url'),${CSRF}
fi

# Loop through URls to add them in the CSRF string
for url in "${urls[@]}"; do
    if  bashio::var.has_value "${url}"; then
        if [[ "${url}" != "null" ]] && [[ "${url}" != "null.local" ]]; then
            CSRF="https://${url}:${port},http://${url}:${port},https://${url},http://${url}",${CSRF}
            if bashio::var.has_value "$(bashio::addon.port 80)"; then
                CSRF="https://${url}:${addon_port},http://${url}:${addon_port}",${CSRF}
            fi
        fi
    fi
done
CSRF=${CSRF::-1}

# Save CSFR
echo -n "${CSRF}" > /var/run/s6/container_environment/PAPERLESS_CSRF_TRUSTED_ORIGINS
bashio::log.blue "PAPERLESS_CSRF_TRUSTED_ORIGINS is set to ${CSRF}"

# Update Supervisord.conf to enable Ingress
bashio::var.json \
        ingress_entry "$(bashio::addon.ingress_entry)" \
        | tempio \
            -template /etc/s6-overlay/s6-rc.d/init-paperless/supervisord.gtpl \
            -out  /etc/supervisord.conf
